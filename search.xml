<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[SSH 实验]]></title>
    <url>%2F2020%2F11%2F03%2Fssh-lab%2F</url>
    <content type="text"><![CDATA[SSH 实验环境准备准备好两台 Linux 操作系统的主机，配置好相关网络参数，实现可以正常通信，并将主机名修改为不同的名字。 临时关闭防护功能： 12iptables -F #清空防火墙规则setenforce 0 #临时关闭SELinux 永久关闭防护功能： 12chkconfig iptables off #设置防火墙开机不自启动sed -i '7s/enconfig/disabled' /etc/selinux/config #永久关闭SELinux 注意：以上两条命令执行后，需要重启服务器才能生效，切记 修改主机名1hostname s01 #服务器 1 上 其他的机器自行修改 用户密码验证Linux主机之间的远程管理工具上ssh命令，所以我们直接使用ssh进行远程登录 12# ssh 用户名@IP地址ssh 用户名@服务器IP地址 密钥对验证Linux主机之间的密钥对登录验证 客户端生成密钥对文件 1ssh-keygen -t rsa -b 2048 -t 指定加密类型 (rsa/dsa 等)-b 指定密钥对加密长度询问1：执行过程中会询问保存位置，一般默认保存在当前用户家目录下面的12345678询问2：是否对密钥文件进行加密 加密：若加密，则在调用密钥文件时需要先验证密钥的密码，密码正确才能使用密钥文件 不加密：若不加密，则密钥文件可以直接被调用，整个登录验证过程无需输入任何密码，即为免密登录2. 将公钥文件上传至服务器端```shellssh-copy-id 用户名@服务器IP地址 #该用户名和要用来登录服务器的用户名一致 客户端尝试登录服务器 1ssh 用户名@服务器IP地址 #密钥对验证优先级大于账户密码验证 禁止使用密码登录当我们学会了使用密钥对进行验证后，建议生产环境下将账户密码登录功能关掉 配置文件：/etc/ssh/sshd_config 选项：PasswordAuthentication no 注意：ssh的配置文件中，并不是注释掉就是不生效的，有些是默认生效，需要修改时一定要取消注释再修改 禁止使用root远程登录root在系统中是一个可以为所欲为的角色。我们可以在平时的操作中用普通用户操作，在有需要修改一些系统设置的时候再从普通用户切换到root用户，这样可以最大限度的避免因为误操作而对系统造成破坏，同时也可以避免黑客在暴力破解后直接使用root用户登录系统，一般在远程登录管理上我们会禁止直接使用root用户登录 配置文件：/etc/ssh/sshd_config 选项：PermitRootLogin no 修改默认端口、限制ssh监听IP修改默认端口：ssh作为一个用来远程管理服务器对工具，需要特别安全，默认情况下使用TCP的22端口，若不进行修改，很容易被利用遭到攻击，所以我们一般都会修改端口，尽量修改一个高位端口(范围1-65535) 配置文件：/etc/ssh/sshd_config 选项：Port 59527 1ssh -p 端口 用户名@服务器IP 限制ssh监听IP：有些服务器则安全级别更高一些，不允许使用外网直接登录，只有通过局域网才能登录，我们可以在机房李设置其中一台能够被外网远程连接，其他主机都通过这个机器进行远程连接即可 配置文件：/etc/ssh/sshd_config 选项：ListenAddress IP地址 ssh服务相关命令scp：安全都远程文件复制命令scp是secure copy的简写，用于在Linux下进行远程拷贝文件的命令，类似于命令有cp，scp传输是加密的，所以可能会稍微影响一点速度。另外，scp还非常不占资源，不会提高多少系统负荷 格式：scp 本地文件 用户名@服务器IP:目录 -P 端口 #若端口不是默认22，则需要使用此格式指定端口 sftp：安全的文件传输协议sftp是Secure FileTransferProtocol的缩写，安全文件传输协议。sftp于ftp有着几乎一样的语法和功能。由于这种传输方式使用了加密/解密技术所以sftp比ftp更安全一些，但传输效率比普通的FTP要低的多 格式： sftp 用户名@服务器IP -oPort=端口 #若端口不是默认22，则需要使用此格式指定端口 交互命令：help：查看在交互模式下支持哪些命令pwd/lpwd：pwd是查看服务器所在目录；lpwd是查看客户端所在路径ls/lls：ls是查看服务器当前目录下的文件列表；lls是查看客户机当前所在的所有文件列表put：将客户机中的指定文件上传到服务器端get：将服务器端的指定文件下载到客户机的当前所在目录rm：删除掉服务器端的指定文件quit：退出sftp的交互模式，断开和服务器之间的连接]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>SSH</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[TCP Wrappers (简单防火墙)]]></title>
    <url>%2F2020%2F11%2F03%2Ftcp-wrappers%2F</url>
    <content type="text"><![CDATA[TCP Wrappers (简单防火墙)TCP Wrappers 简介TCP_Wrappers 是一个工作在第四层(传输层)的安全工具，对有状态连接(TCP)的特定服务进行安全检测并实现访问控制，界定方式是凡是调用libwrap.so库文件的程序就可以受TCP_Wrappers的安全控制。它的主要功能就是控制谁可以访问，常见的程序有rpcbind、vsftpd、sshd、telnet。 判断方式： 查看对应服务命令所在位置 1which sshd 查看指定命令执行时是否调用libwrap.so文件 1ldd /usr/sbin/sshd | grep libwrap.so TCP Wrappers 工作原理以ssh为例，每当有ssh的连接请求时，先读取系统管理员所设置的访问控制文件，符合要求，则会把这次连接原封不动的转给ssh进程，由ssh完成后续工作；如果这次连接发起的ip不符合访问控制文件中的设置，则会中断连接请求，拒绝提供ssh服务。 客户端请求 -&gt; TCP Wrappers -&gt; ip是否被写入/etc/hosts.allow (是)-&gt; 允许 (否)-&gt; ip是否被写入/etc/hosts.deny (是)-&gt;拒绝 (否)-&gt;允许 优先查看hosts.allow，匹配即停止 允许个别，拒绝所有：hosts.allow文件添加允许的策略，hosts.deny文件添加all 拒绝个别，允许所有：hosts.allow文件为空，hosts.deny文件添加单个拒绝的策略 TCP Wrappers 的使用TCP_Wrappers的使用主要是依靠两个配置文件/etc/hosts.allow和/etc/hosts.deny，以此实现访问控制，默认情况下，/etc/hosts.allow和/etc/hosts.deny什么都没有添加，此时没有限制 配置文件编写规则 1service_list@host: client_list client_list：是程序(服务)的列表，可以是多个，多个时，使用,隔开@host：设置允许或者禁止他人从自己的哪个网口进入。这一项不写，就代表全部client_list：是访问者的地址，如果需要控制的用户较多，可以使用空格或,隔开 格式如下： 基于IP地址：192.168.88.1 192.168.88. 基于主机名：www.who.com .who.com 基于网络/掩码：192.168.0.0/255.255.255.0 内置的ACL：ALL(所有主机)、LOCAL(本地主机)]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Go Modules 项目构建]]></title>
    <url>%2F2019%2F10%2F06%2Fgomod%2F</url>
    <content type="text"><![CDATA[Go 项目构建 关于 Go Modules Golang的包管理 go modules随着golang 1.11的发布而和我们见面了，这是官方提倡的新的包管理，乃至项目管理机制，可以不再需要GOPATH的存在。 初始化项目1go mod init [module name] 这样就快速通过 go modules 构建一个 Go 项目了]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于 Docker 搭建 Nginx]]></title>
    <url>%2F2019%2F03%2F18%2Fdockerwithnginx%2F</url>
    <content type="text"><![CDATA[基于 Docker 搭建 Nginx Docker安装基于安装Docker-ce 先搜索Nginx的镜像 使用1docker pull nginx 拉取官方镜像。 使用 1docker container run 启动容器 1234567docker container run \-d \-p 80:80 \-p 443:443 \--name nginx \--rm \nginx 1234567-d : 后台运行-p ：容器的80端口映射到80 --rm：容器停止运行后，自动删除容器文件 --name：容器的名字为nginx 启动成功 关闭 1docker container stop nginx Tips：注意stop后面加的是对应的容器名或者ID 映射目录 网页文件都在容器里，没法直接修改，显然很不方便。下一步就是让网页文件所在的目录/usr/share/nginx/html映射到本地。 首先，新建一个目录，并进入该目录。 1234mkdir /usr/share/nginxmkdir /usr/share/nginx/html# 进入html文件夹cd /usr/share/nginx/html 在这个子目录里面，放置一个index.html文件，内容如下。 1&lt;h1&gt;Hello World&lt;/h1&gt; 接着，就可以把这个子目录html，映射到容器的网页文件目录/usr/share/nginx/html。 1234567docker container run \-d \-p 80:80 \-p 443:443 \--rm \--name nginx \nginx 打开浏览器，访问 对应IP，应该就能看到 Hello World 了。 拷贝配置 修改网页文件还不够，还要修改 Nginx 的配置文件，否则后面没法加 SSL 支持。 首先，把容器里面的 Nginx 配置文件拷贝到本地。 1docker container cp nginx:/etc/nginx . 上面命令的含义是，把nginx容器的/etc/nginx拷贝到当前目录。不要漏掉最后那个点。 执行完成后，当前目录应该多出一个nginx子目录。然后，把这个子目录改名为conf。 1mv nginx conf 现在可以把容器终止了。 1docker container stop nginx 映射配置目录 重新启动一个新的容器，这次不仅映射网页目录，还要映射配置目录。 Tips：注意退回到nginx目录下，目录下是conf和html两个文件夹 123456789docker container run \-d \-p 80:80 \-p 443:443 \--volume &quot;$PWD/html&quot;:/usr/share/nginx/html \--volume &quot;$PWD/conf&quot;:/etc/nginx \--rm \--name nginx \nginx 上面代码中，–volume “$PWD/conf”:/etc/nginx表示把容器的配置目录/etc/nginx，映射到本地的conf子目录。 浏览器访问对应 IP，如果能够看到网页，就说明本地的配置生效了。这时，可以把这个容器终止。 1docker container stop nginx 自签名证书 现在要为容器加入 HTTPS 支持，第一件事就是生成私钥和证书。正式的证书需要证书当局（CA）的签名，这里是为了测试，搞一张自签名（self-signed）证书就可以了。 1234567sudo openssl req \-x509 \-nodes \-days 365 \-newkey rsa:2048 \-keyout example.key \-out example.crt 上面命令的各个参数含义如下。 1234567req：处理证书签署请求。-x509：生成自签名证书。-nodes：跳过为证书设置密码的阶段，这样 Nginx 才可以直接打开证书。-days 365：证书有效期为一年。-newkey rsa:2048：生成一个新的私钥，采用的算法是2048位的 RSA。-keyout：新生成的私钥文件为当前目录下的example.key。-out：新生成的证书文件为当前目录下的example.crt。 执行后，命令行会跳出一堆问题要你回答，比如你在哪个国家、你的 Email 等等。 其中最重要的一个问题是 Common Name，正常情况下应该填入一个域名，这里可以填 127.0.0.2。 回答完问题，当前目录应该会多出两个文件：example.key和example.crt。 conf目录下新建一个子目录certs，把这两个文件放入这个子目录。 12mkdir conf/certsmv example.crt example.key conf/certs HTTPS 配置 有了私钥和证书，就可以打开 Nginx 的 HTTPS 了。 首先，打开conf/conf.d/yourrepo.conf文件,添加下面的配置。 1234567891011121314151617181920212223242526server &#123; listen 80; #listen [::]:80; server_name youdomain.com; return 301 https://$server_name$request_uri; &#125; server &#123; listen 443 ssl http2; #listen [::]:443 ssl http2; server_name youdomain.com; ssl on; ssl_certificate /etc/nginx/certs/example.crt; ssl_certificate_key /etc/nginx/certs/example.key; ssl_session_timeout 5m; ssl_protocols TLSv1.3 TLSv1.2; ssl_prefer_server_ciphers on; ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4; location / &#123; root /usr/share/nginx/html; index index.html index.htm; &#125; &#125; 然后，启动一个新的 Nginx 容器。 打开浏览器，访问对应 IP 。因为使用了自签名证书，浏览器会提示不安全。不要去管它，选择继续访问，应该就可以看到 Hello World 了。 至此，Nginx 容器的 HTTPS 支持就做好了。]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[安装Docker-ce]]></title>
    <url>%2F2019%2F03%2F01%2Finstalldockerce%2F</url>
    <content type="text"><![CDATA[安装Docker-ce 安装与使用Docker-ce 依赖的基础环境 64 bits CPU Linux Kernel 3.10+ Linux Kernel cgroups and namespaces CentOS 7 “Extras” repository Docker Daemon systemctl start docker.service Docker Client docker [OPTIONS] COMMAND [args…] 显示所有已启用的存储库 1yum repolist Tips：docker存在extras仓库中。 查看docker在这个仓库中的版本 清华大学开源软件镜像站-CnetOS7-extras下的包 Tips：通常不用这个安装 下载docker-ce的docker-ce.repo docker-ce.repo 1wget https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/centos/docker-ce.repo 修改docker-ce.repo文件 Tips：通常情况下下载的源是download.docker.com，我们需要换成清华开源软件镜像的下载源。 docker-ce的列表 1vim docker-ce.repo 配置如下： 1:%s@https://download.docker.com/@https://mirrors.tuna.tsinghua.edu.cn/docker-ce/@ 再次查看仓库 1yum repolist 下载docker-ce 1yum install docker-ce Tips：注意是docker-ce不是docker，如果输入docker下载的是extras仓库里的。 配置docker-ce的配置文件 注册阿里云账号，专用加速器地址获得路径 https://cr.console.aliyun.com/#/accelerator 配置如下： 1mkdir /etc/docker 1vim /etc/docker/daemon.json 123&#123; &quot;registry-mirrors&quot;: [&quot;https://registry.docker-cn.com&quot;]&#125; Tips：此处是docker cn的加速器地址。 启动docker-ce 1systemctl start docker.service 查看docker版本 安装成功！！！]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTTP协议]]></title>
    <url>%2F2019%2F02%2F02%2Fhttp%2F</url>
    <content type="text"><![CDATA[HTTP协议 HTTP协议 什么是协议 双方在交互、通讯的时候， 遵守的一种规范、规则。 http协议 针对网络上的客户端 与 服务器端在执行http请求的时候，遵守的一种规范。 其实就是规定了客户端在访问服务器端的时候，要带上哪些东西， 服务器端返回数据的时候，也要带上什么东西。 版本 1.0 请求数据，服务器返回后， 将会断开连接 1.1 请求数据，服务器返回后， 连接还会保持着。 除非服务器 | 客户端 关掉。 有一定的时间限制，如果都空着这个连接，那么后面会自己断掉。 演示客户端 如何 与服务器端通讯。 在地址栏中键入网络地址 回车 或者是平常注册的时候，点击了注册按钮 ， 浏览器都能显示出来一些东西。那么背地里到底浏览器和服务器是怎么通讯。 它们都传输了哪些数据。 安装抓包工具 HttpWatch (IE插件) 打开tomcat. 输入localhost:8080 打开首页 在首页上找到Example 字样 6.x 和 7.x 的文档页面有所不同，但是只要找到example就能够找到例子工程 选择 servlet 例子 —&gt; Request Parameter 接着点击Request Parameters 的 Execute超链接 执行tomcat的例子，然后查看浏览器和 tomcat服务器的对接细节 Http请求数据解释 请求的数据里面包含三个部分内容 ： 请求行 、 请求头 、请求体 请求行 POST /examples/servlets/servlet/RequestParamExample HTTP/1.1 POST ： 请求方式 ，以post去提交数据 /examples/servlets/servlet/RequestParamExample 请求的地址路径 ， 就是要访问哪个地方。 HTTP/1.1 协议版本 请求头 Accept: application/x-ms-application, image/jpeg, application/xaml+xml, image/gif, image/pjpeg, application/x-ms-xbap, */* Referer: http://localhost:8080/examples/servlets/servlet/RequestParamExample Accept-Language: zh-CN User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E) Content-Type: application/x-www-form-urlencoded Accept-Encoding: gzip, deflate Host: localhost:8080 Content-Length: 31 Connection: Keep-Alive Cache-Control: no-cache Accept: 客户端向服务器端表示，我能支持什么类型的数据。 Referer ： 真正请求的地址路径，全路径 Accept-Language: 支持语言格式 User-Agent: 用户代理 向服务器表明，当前来访的客户端信息。 Content-Type： 提交的数据类型。经过urlencoding编码的form表单的数据 Accept-Encoding： gzip, deflate ： 压缩算法 。 Host ： 主机地址 Content-Length： 数据长度 Connection : Keep-Alive 保持连接 Cache-Control ： 对缓存的操作 请求体 浏览器真正发送给服务器的数据 发送的数据呈现的是key=value ,如果存在多个数据，那么使用 &amp; firstname=zhang&amp;lastname=sansan Http响应数据解析 请求的数据里面包含三个部分内容 ： 响应行 、 响应头 、响应体 HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Content-Length: 673 Date: Fri, 17 Feb 2017 02:53:02 GMT ...这里还有很多数据... 响应行 HTTP/1.1 200 OK 协议版本 状态码 咱们这次交互到底是什么样结果的一个code. 200 : 成功，正常处理，得到数据。 403 : for bidden 拒绝 404 ： Not Found 500 ： 服务器异常 OK 对应前面的状态码 响应头 Server: 服务器是哪一种类型。 Tomcat Content-Type ： 服务器返回给客户端你的内容类型 Content-Length ： 返回的数据长度 Date ： 通讯的日期，响应的时间 Get 和 Post请求区别 post 1. 数据是以流的方式写过去，不会在地址栏上面显示。 现在一般提交数据到服务器使用的都是POST 2. 以流的方式写数据，所以数据没有大小限制。 get 1. 会在地址栏后面拼接数据，所以有安全隐患。 一般从服务器获取数据，并且客户端也不用提交上面数据的时候，可以使用GET 2. 能够带的数据有限， 1kb大小 Web资源在http协议当中，规定了请求和响应双方， 客户端和服务器端。与web相关的资源。 有两种分类 静态资源 html 、 js、 css 动态资源 servlet/jsp 总结 Http协议 使用HttpWacht 抓包看一看http请求背后的细节。 基本了解 请求和响应的数据内容 请求行、 请求头 、请求体 响应行、响应头、响应体 Get和Post的区别]]></content>
      <categories>
        <category>协议</category>
      </categories>
      <tags>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Welcome]]></title>
    <url>%2F2019%2F01%2F22%2Fbackgroudmusic%2F</url>
    <content type="text"><![CDATA[Tips：只显示1000首歌曲，歌单中有版权音乐，有些歌曲无法播放，敬请谅解。]]></content>
      <categories>
        <category>Daily</category>
      </categories>
      <tags>
        <tag>Schedule</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Github 搭建 Hexo 博客]]></title>
    <url>%2F2019%2F01%2F16%2Fhexo%2F</url>
    <content type="text"><![CDATA[Github 搭建 Hexo 博客 简介本篇文章主要讲解Hexo在GitHub上搭建博客接下来让我们一起进入Hexo搭建博客学习吧。 Hexo什么是Hexo？Hexo是一个快速、简洁且高效的博客框架。Hexo使用Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 当我们在遇到一个新东西的时候，进入其官网能帮助我们解决很多问题。关于什么是Hexo？还有一些关于Hexo的问题，大家进入Hexo官网进行查看。 如何使用我们在使用Hexo之前需要准备一些东西，也就是需要安装一些我们必需的。 安装安装所需安装Hexo相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序： Node.js Git npm 如果npm运行出错就安装cnpm国内镜像 如果没有安装那么就需要安装咯，大家可以看看Vue-cli项目创建如何检查Node.js、Git和cnpm是否安装成功。 安装Hexo所有必备的应用程序安装完成后，即可使用npm或者cnpm来安装Hexo。打开Git Bash Here输入： 1npm install -g hexo-cli 检查是否安装Hexo完成,查询是否成功，显示hexo-cli版本就说明成功了 1hexo -V 建站安装一切所需的程序后，我们可以开始建站了，就是创建我们的博客,大家也可以进入Hexo建站官网查看。新建一个文件夹，来管理我们的博客项目，请执行下列命令，Hexo将会在指定文件夹中新建所需要的文件。 运行命令123hexo init &lt;folder&gt;cd &lt;folder&gt;npm install 注：folder是表示建站的博客项目名 打开Git Bash Here，输入： 1hexo init myblog 再运行以下命令：myblog是我创建博客站。12cd myblognpm install 访问URL我们可以运行看看Hexo创建的博客站是什么样的，运行以下命令 1hexo s 访问URL 1http://localhost:4000/ 好了，到这里你已经学会了通过Hexo创建博客了，接下来我们将会分析如何将我们的博客上传到我们的GitHub服务器上 上传到GitHubGitHub创建repositories进入GitHub官网,或者在浏览器输入https://github.com/,如果还没有账号就创建一个账号就好了，这里不教大家怎么注册账号了。登录自己的账号，直接点击new repositories或者进入You repositories再new repositories 进入到创建repositories页面来,这里很重要，一定要注意哦！必须将新建的repository的名字为: You account name.github.io。其他默认就好了 配置 注：repository: https://github.com/name/name.github.io.git 是自己刚刚创建You account name.github.io 的repository，在Clone with HTTPS里面，复制粘贴就好咯。冒号后面记得空格哦。branch 后面是master就好了。 GitHub的Repository创建好后。我们在回到本地的Hexo的Myblog项目中,找到在项目的根目录下_config.yml找到 deploy标签 在该文件下面添加 1234deploy: type: git repository: https://github.com/name/name.github.io.git #复制过来 branch: master 在_config.yml找到url进行修改为： 1url: http://name.github.io #假设name是我的账号，修改为自己的账号 部署到这里就差不到了，接下来我们需要执行一些命令，将我们的博客部署到GitHub上了，惊喜将会到来了。打开Git Bash Here进入myblog根目录下，首先我们需要安装一下hexo-deployer-git不然可能出现错误，无法部署成功，执行命令行。 1npm install hexo-deployer-git --save 然后在执行以下命令: 注：每次提交时必须执行这三个命令 123hexo cleanhexo generatehexo deploy 或者简写方式 123hexo cleanhexo ghexo d 测试我们进行访问https://name.github.io/和 http://localhost:4000/一样的页面说明是已经成功。 总结我们已经从如何使用Hexo到部署上GitHub上。需要我们对一些命令行的操作，还有一些需要我们必须注意的，一定要小心，不然就出错了。]]></content>
      <categories>
        <category>项目</category>
      </categories>
      <tags>
        <tag>Repositories</tag>
        <tag>Github</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Nginx 配置 HTTPS]]></title>
    <url>%2F2018%2F12%2F31%2Fnginxsethttps%2F</url>
    <content type="text"><![CDATA[Nginx 配置 HTTPS 配置文件基本如下，请参考并进行相应的修改 123456789101112131415161718192021222324server &#123; listen 80; server_name domain.example.com ; #修改为自己的域名 rewrite ^(.*)`$ https://$`host$1 permanent; &#125;server &#123; listen 443; server_name domain.example.com; #修改为自己的域名 ssl on; root html; #html修改为网站的对应路径 index index.html index.htm; ssl_certificate cert/yourcrt.pem; #将证书添加到相应的文件夹 ssl_certificate_key cert/yourkey.key; #将密钥添加到相应的文件夹 ssl_session_timeout 5m; ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_prefer_server_ciphers on; location / &#123; root html; #html修改为网站的对应路径 index index.html index.htm; &#125;&#125;]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Centos 设置静态 IP 联网]]></title>
    <url>%2F2018%2F12%2F31%2Fcentossetstaticnetwork%2F</url>
    <content type="text"><![CDATA[第一步，我们进入/etc/sysconfig/network-scripts目录，查看该目录有没有形如ifcfg-XXX的文件： 如果你看不到以ifcfg-打头的文件（ifcfg-lo除外），说明网卡设备没有被正确识别，可能是你下载的centos镜像版本和你安装centos时选择的centos版本不一致，比如，centos镜像是64位的，却按照32位来安装。（ 建议重装 下面进行第二步： 在VMware里，依次点击”编辑“ - ”虚拟网络编辑器“，如下图，我选择的是NAT模式： 在这个界面接着点”NAT设置”，查看虚拟机的网关，这个网关在第三步要用。 第三步： 以root权限编辑/etc/sysconfig/network-scripts/ifcfg-ens33 #这边对应你自己的文件名 箭头指向的都修改位相应的模式 下方属性为对应添加的1234IPADDR=192.168.152.127 #设置时查看虚拟网络编辑器VMnet8下的DHCP设置，从起始IP地址开始分配GATEWAY=192.168.152.2 #刚刚前面查看的NAT设置的网关地址NETMASK=255.255.255.0 #这是子网掩码DNS1=114.114.114.114 #给服务器设置一个DNS服务器，这个为公用的一个服务器 最后重启网络配置1sevice network restart]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
</search>
